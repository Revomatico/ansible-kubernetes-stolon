- name: Install ansible requirements
  pip:
    executable: pip3
    extra_args: -U
    name: "{{ item }}"
  loop: "{{ lookup('file', 'requirements.txt').splitlines() }}"

- name: "Create namespace - {{ stolon_namespace }}"
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ stolon_namespace }}"

- set_fact:
    stolon_cluster_label: "{% if stolon_release | default('') %}{{ stolon_release }}-{% endif %}{{ stolon_cluster }}"
  tags:
  - all
  - data_clusters

- name: Setup RBAC
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    definition: "{{ lookup('template', item + '.yaml.j2') | from_yaml }}"
    namespace: "{{ stolon_namespace | default(omit) }}"
    force: "{{ kubernetes_force | default(true) }}"
  loop:
  - role
  - role-binding
  when: stolon_rbac

- name: Get Kubernetes nodes
  k8s_facts:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    kind: 'Node'
  register: kubernetes_nodes

- name: Create persistent volumes
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    definition: "{{ lookup('template', 'stolon-keeper-pv.yaml.j2') | from_yaml }}"
    namespace: "{{ stolon_namespace | default(omit) }}"
    force: "{{ kubernetes_force | default(true) }}"
  loop: "{{ kubernetes_nodes.resources }}"
  loop_control:
    loop_var: node
    label: "{{ node.metadata.name }}"

- name: Load kubernetes definitions
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    definition: "{{ lookup('template', item + '.yaml.j2') | from_yaml }}"
    namespace: "{{ stolon_namespace | default(omit) }}"
    force: "{{ kubernetes_force | default(false) }}"
  register: ret
  retries: "{{ kubernetes_retries | default(10) }}"
  delay: "{{ kubernetes_delay | default(15) }}"
  until: |
    ret.get('status', 200) != 200
    or (
      ret.get('result', {}).get('kind') in ['Deployment', 'StatefulSet']
      and
        ret.get('result', {})
           .get('status', {})
           .get('readyReplicas', -1)
        == ret.get('result', {})
              .get('status', {})
              .get('replicas')
    )
    or ret.get('result', {}).get('kind') not in ['Deployment', 'StatefulSet']
  loop:
  - secret
  - storage-class
  - stolon-keeper
  - stolon-proxy-service
  - stolon-proxy
  - stolon-sentinel

- name: Create PostgreSQL data cluster
  include_tasks: kubernetes-stolon/tasks/postgresql-cluster.yml
  tags: data_clusters
